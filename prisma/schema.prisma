// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String?  @unique
  emailVerified      DateTime?
  image              String?
  
  // Custom fields
  emailAddress       String?  @unique
  imageUrl           String?
  githubId           String?  @unique
  twitterId          String?  @unique
  accessToken        String?
  githubToken        String?
  githubRefreshToken String?
  geminiApiKey       String?
  credits            Int      @default(100)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  userToProjects UserToProject[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  githubUrl String

  deletedAt DateTime?

  userToProjects       UserToProject[]
  commits              Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")?
  sourceCode       String
  fileName         String
  summary          String

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime

  summary String
}

